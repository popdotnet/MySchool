@{
    Page.Title = "Create an account";
    var sql = string.Empty;

    var username = Request["username"];
    var password = Request["password"];
    var email = Request["email"];
    var email2 = Request["email2"];
   
    UserBal userBal = new UserBal();
    List<UserEntity> userLst = userBal.GetList(WebSecurity.CurrentUserName);

    if (IsPost)
    {
        if (username.IsEmpty())
        {
            ModelState.AddError("username", "You must provide a user name");
        }

        if (password.IsEmpty())
        {
            ModelState.AddError("password", "You must provide a password");
        }

     

        if (email.IsEmpty())
        {
            ModelState.AddError("email", "You must provide your email address");
        }
        else
        {
            var db = Database.Open("ConStr1");
            sql = "SELECT Email FROM Users WHERE Email = @0";
            var emailDb = "";
            emailDb = db.QueryValue(sql, Request["email"]);

            if (!emailDb.IsEmpty())
            {
                ModelState.AddError("email", "This email is taken by another user");
            }


        }

        if (!email.IsEmpty() && !Functions.IsValidEmail(email))
        {
            ModelState.AddError("email", "Please provide a valid email address");
        }

        if (email2 != email)
        {
            ModelState.AddError("email2", "Your email addresses must match");
        }

        if (!ModelState.IsValid)
        {
            ModelState.AddFormError(@"Please fix the errors below before resubmitting the form");
        }
        else
        {
            var db = Database.Open("ConStr1");
            var user = new { UserName = username, Email = email };

            try
            {
                var token = WebSecurity.CreateUserAndAccount(username, password, user, false);
                var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                //var queryString = HttpUtility.UrlEncode(token);
                //var confirm = "~/Account/Confirm?confirmationCode=";
                //var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute(confirm + queryString);
                //var message = "<p>Your confirmation code is: " + token + "</p>" +
                //              "<p>Visit <a href=\"" + confirmationUrl + "\">" +
                //              confirmationUrl + "</a>" +
                //              " to activate your account.</p>";

                //WebMail.Send(to: email, subject: "Please confirm your account", body: message, isBodyHtml: true);
                //Roles.AddUsersToRoles(new[]{username}, new[]{"PowerUser"});
                if (username.ToLower() == "control")
                {
                    Roles.AddUserToRoles(username, new[] { "ControlRol", "AdminRol", "PowerUserRol" });
                }

                Response.Redirect("~/Account/Thanks");


            }
            catch (MembershipCreateUserException ex)
            {
                if (ex.StatusCode == MembershipCreateStatus.DuplicateUserName)
                {
                    ModelState.AddError("username", "That user name is already in use. Please choose another.");
                    ModelState.AddFormError(@"Please fix the errors below before resubmitting the form");
                }
                else
                {
                    ModelState.AddFormError("Something went wrong. Please try again");
                }

            }
        }



    }
}

<div class="row">
    <div class="col-md-12">
        <h2>Create an account</h2>
        <p>
            Use the form below to create an account with the site.
            Then you can post tasks.
            Please ensure that you complete all fields
            marked with an asterisk *
        </p>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <form method="post" class="form-horizontal">
            <fieldset>
                <legend>Register</legend>

                <div class="form-group">
                    @Html.ValidationSummary(true)
                </div>

                <div class="form-group">
                    <div class="col-md-2">
                        <label for="username">User Name*</label>
                    </div>
                    <div class="col-md-10">
                        <input type="text" id="username" name="username" value="@username" />
                        @Html.ValidationMessage("username")
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-2">
                        <label for="password">Password*</label>
                    </div>
                    <div class="col-md-10">
                        <input type="password" id="password" name="password" />
                        @Html.ValidationMessage("password")
                    </div>
                </div>

                


                <div class="form-group">
                    <div class="col-md-2">
                        <label for="email">Email*</label>
                    </div>
                    <div class="col-md-10">
                        <input type="text" id="email" name="email" value="@email" />
                        @Html.ValidationMessage("email")
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-2">
                        <label for="email2">Re-enter your email*</label>
                    </div>
                    <div class="col-md-10">
                        <input type="text" id="email2" name="email2" value="@email2" />
                        @Html.ValidationMessage("email2")
                    </div>
                </div>


                <div>
                    <input type="submit" name="Submit" value="Submit" class="btn btn-default" />
                </div>

            </fieldset>

        </form>

    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h3 style="border-bottom:2px solid #ddd; color:#ff6a00">Users List</h3>

        <table class="table">
            <thead>
                <tr>
                    <th>User Name</th>
                    <th>Email Address</th>
                    <th>Person Name</th>
                </tr>
            </thead>
            <tbody>
                @if (userLst != null)
                {
                    foreach (var itm in userLst)
                    {
                        itm.GetData();
                       
                        <tr>
                            <td>@itm.UserName</td>
                            <td>@itm.Email</td>
                            
                        </tr>
                    }
                }
            </tbody>
        </table>


    </div>
</div>
